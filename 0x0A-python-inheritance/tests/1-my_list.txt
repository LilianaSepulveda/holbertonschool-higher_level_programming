# 1-my_list.txt

_______________
How use 1-my_list.py
___________________

This module define class MyList that inherits from list.

MyList can be instatiated with no arguments, will return an empty list:

>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>
>>> print(my_list)
[]

or a single arguments

>>> my_list = MyList([1, 3, 8])
>>> print(my_list)
[1, 3, 8]

>>> issubclass(MyList, list)
True

>>> '__init__' in dir(MyList)
True

>>> '__str__' in dir(MyList)
True
>>> '__repr__' in dir(MyList)
True

must be a itenerable object

>>> my_list = MyList(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'NoneType' object is not iterable

a TypeError will be raised for more than one instation arguments

>>> my_list = MyList([1, 4], [8, 10])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: list expected at most 1 argument, got 2

>>> my_list = MyList([2, 0, 8, 5, 15])
>>> print(my_list)
[2, 0, 8, 5, 15]

>>> my_list.print_sorted()
[0, 2, 5, 8, 15]

Usege
------

Mylist is an inherited list class, and have the same methods.
for instance, elements can be added with append methods


>>> my_list = MyList()
>>> my_list.append(20)
>>> my_list.append(25)
>>> my_list.append(3)
>>> print(my_list)
[20, 25, 3]

Replaced with indexing:

>>> my_list[0] = 19
>>> print(my_list)
[19, 25, 3]

remove() methods

>>> my_list.remove(19)
>>> print(my_list)
[25, 3]

>>> my_list = MyList()
>>> print(my_list.print_sorted)
<bound method MyList.print_sorted of []>

>>> my_list.print_sorted(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: print_sorted() takes 1 positional argument but 2 were given

>>> my_list = MyList()
>>> my_list.append("Liliana")
>>> my_list.append("happy")
>>> my_list.append("Sunshine")
>>> my_list.append("School")
>>> my_list.append("Betty")
>>> print(my_list)
['Liliana', 'happy', 'Sunshine', 'School', 'Betty']

>>> my_list.print_sorted()
['Betty', 'Liliana', 'School', 'Sunshine', 'happy']

the original list is unaltered

>>> print(my_list)
['Liliana', 'happy', 'Sunshine', 'School', 'Betty']

Nothing to sort with empty lists

>>> my_list = MyList()
>>> my_list.print_sorted()
[]

TypeError will be raised when print_sorted is called on a list of different types

>>> my_list = MyList([6, "Liliana", "Holberton", 13])
>>> my_list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/lili/holberton/holbertonschool-higher_level_programming/0x0A-python-inheritance/1-my_list.py", line 10, in print_sorted
    print(sorted(self))
TypeError: '<' not supported between instances of 'str' and 'int'

>>> my_list.append(2)
>>> my_list.append(8)
>>> my_list.append(-9)
>>> my_list.append(-3)
>>> my_list.append(34)
>>> my_list.append(15)
>>> my_list.print_sorted()
[-9, -3, 2, 8, 15, 34]

>>> my_list.append('v')
>>> my_list.append('a')
>>> my_list.append('z')
>>> my_list.append('x')
>>> my_list.append('L')
>>> my_list.append('A')
>>> my_list.append('s')
>>> my_list.append('s')
>>> my_list.append('S')
>>> my_list.print_sorted()
['A', 'L', 'S', 'a', 's', 's', 'v', 'x', 'z']
